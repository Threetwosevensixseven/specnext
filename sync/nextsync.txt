NextSync 0.7
by Jari Komppa 2020
http://iki.fi/sol



What is this?
-------------
NextSync provides a way to transfer files to the ZX Spectrum Next using
the Next's WIFI module. While it is primarily designed to be a 
development tool (syncing builds easily to the next), but it can be 
useful for non-developer users of the Next.

NextSync consists of two parts: server running on a desktop machine
and a "dot" command running on the next itself.

The server is implemented in Python 3, and as such should work on any
platform that runs Python (windows, mac, linux, bsd, probably your
fridge).



Usage concept
-------------
Server runs from a directory that is mirrored to the root of the next
filesystem. I.e, if you want to copy "hello.txt" to "/test/" directory,
first create the "test" directory both on the sd card and under
the folder you're running the server from, put "hello.txt" to the
server's "test" directory, and run .sync on the next. The file
should get copied over.

        For example: Assuming you're running the server from:

            c:\spectrum_stuff\nextsync\

        the file:

            c:\spectrum_stuff\nextsync\dot\zakplay

        will be synced to 

            /dot/zakplay

You don't need (and should not!) have all of the sd card's files in
your sync folder.

The sever creates syncpoint.dat to know which files are new. If you
want to sync everything, just delete the file.

If you have files in your sync folder you don't want to be synced
(such as temporary files from compilation), you can add them to the
syncignore.txt file.

The server does not need to be closed between syncs. The server
checks for files to send when .sync is run on the next.



Step By Step Setup
------------------

DESKTOP SIDE SETUP

1.  Copy the specnext.py to the directory on your machine which you
    desire to represent the "root" of the Next's filesystem (i.e, the
    sd card). You may also want to copy the syncignore.txt.
    syncignore.txt contains filenames and file masks you don't want
    to sync. The default ignores .bak files as well as the server
    itself.    

2.  Install python 3 if you don't have it (python.org)

3.  Run the server specnext.py. It should show something like the
    following:

        NextSync server, protocol version NextSync2
        by Jari Komppa 2020

        Running on host: DESKTOP-NEW2020
        IP addresses:
            192.168.56.1
            192.168.1.225

        Note: Using C:\specnext\nextsync as sync root
        Note: Sync point file syncpoint.dat not found, syncing all files regardless of timestamp.
        Warning: Ready to sync 48 files, 471.53 kilobytes.

        2020-05-18 22:02:55 | NextSync listening to port 2048

4. Take heed of the warnings printed. If the root directory is wrong or 
   you're seeing a massive amount of data to be synced, you may have
   run the server in a wrong directory.
   
5. Your operating system may ask if you want to let the server
   use the network. Local area network access is sufficient.   

ZX SPECTRUM NEXT SIDE SETUP

5.  Copy dot/sync from this distribution to your spectrum next sd card
    (into the dot directory).
   
6. Make sure the WIFI module is working on the next. If you've never
   used it, run the /demos/esp/wifi.bas from the spectrum next sd card.
   After setting up, you can try /demos/NXtel to see if you can 
   connect somewhere. 

7. Open next command line and type .sync and hit enter. It should complain
   that the configuration file is missing.
   
8. Type .sync followed by either your server's host name or ip address.
   Either should work. If more than one ip address is listed, it's possible
   you are on several networks, or have installed VirtualBox or some other
   thingy that creates virtual network interfaces. Use the one that's
   in your local area network. If you use the wrong one, it doesn't matter,
   it just won't work. You can always try the other one later.
   
9. Now you can type .sync without parameters and it should do the sync.

Now you can add/modify files to the server directory (or, more likely, a 
subdirectory) and run .sync again. Note that you don't need to close the server.
    
The server only sends new files. To force sync of everything, delete
the syncpoint.dat file that the server creates.
    
To close the server, either just close its window, or hit control-break.
Control-c doesn't seem to work, at least in windows.
    
    
    
Troubleshooting
---------------

    - When in doubt, cold boot the next, close server and restart it.

"Can't talk to esp" 
    - Is the wifi module installed?
    - Is the wifi module configured?
    - The wifi module is probably not in its default bit rate. 
      Try cold boot (completely power off), or if you'd rather not, you can type
      .uart -f to reset the bit rate. 
      To exit the '.uart' press symbol shift and space.
      
"Can't talk to esp fast"
    - Shouldn't happen. Do a cold boot and try again.
    - Try syncslow instead of sync. 
      syncslow is a fallback version which uses the standard uart speed.

"Unable to connect"
    - Is the server running?
    - Is the server ip/name correct?
    - Is the server on the same network?
    - Is the Next's wifi configured to be on the same network?
    - The server name is stored in c:/sys/config/nextsync.cfg

"Server version mismatch"
    - Use the same version of server and .sync
    - If you do and still get this, something is seriously wrong.

"Unable to open file"
    - Can happen if you're trying to sync sync itself, or if the files are open
      otherwise, write protected or broken or something else went wrong.

"Close failed"
    - Server probably closed the connection. Shouldn't happen.

Python error:
    Traceback (most recent call last):
       File "... nextsync.py", line 198, in <module>
         main()
       File "... nextsync.py", line 100, in main
         hostinfo = socket.gethostbyname_ex(socket.gethostname())
    UnicodeDecodeError: 'utf-8' codec can't decode byte ... in position ...

    - You're running Windows and your host name has non-ascii characters.
      This is a known python issue from 2016. Either rename your computer,
      or you can try setting the PYTHONLEGACYWINDOWSFSENCODING environment 
      variable to 1.
      
Transfers sometimes stall for several seconds, then continue:
    - This just seems to happen. I have no answer to this at this time.    


Server options
--------------

The server creates syncpoint.dat file which it uses to detect new files to sync.
If you manage to create files with older timestamp than this, they won't be
synced.

To force sync all of the files, delete this file. 

To make the server ignore some files and never sync them, add the filenames
(or file masks) to the syncignore.txt file. For example:

    syncignore.txt
    
tells the server not to sync the 'syncignore.txt' file.
    
    *.py
    
tells the serer not to sync any files with the .py extension.

The server names the filenames it sends as /foo/bar, meaning if you run
sync from a different drive (should you have several), the sync will
happen to that drive. You can run the server with an optional parameter
to add drive letter too:

nextsync.py -c

turns the filenames to c:/foo/bar. The same goes for -d and -e.

The ram disk m: cannot be used as a sync target, and the same goes for
mounted .dsk or .p3m images. This is a limitation of the esxdos interface
sync is based on.



Protocol
--------

The NextSync2 protocol works as follows:

All server sent packages are encapsulated with
[2 bytes big endian whole packet size][payload][checksums, 2 bytes]

Where checksum1 and checksum2 are calculated by:
checksum1=0
checksum2 = 0
for every x in payload:
  checksum1 = checksum1 xor x
  checksum2 = checksum2 + checksum1

Handshake:
next: "Sync2"
server:"NextSync2"
- To check that we're talking the same language

Next file:
next: "Next"
server: [file length 4 bytes big endian][filename length 1 byte][filename]
- Request the next file to be synced
- If no files left, payload of five zeroes

Next chunk:
next: "Get"
server: [up to 1024 bytes]
- If file has ended, payload is empty

Retry:
next:"Retry"
server: resend previous payload
- Note that this can also happen after 'Next' packet.
- Retrying happens forever

Otherwise:
next:???
server:"Error"
- For other requests, server returns "Error"

